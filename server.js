const express = require("express");
const cors = require("cors");

const app = express();
const db = require("./app/models");

const authTypes = db.authTypes;
//------------------------------------------------------------------------------
// create sentimentTypes
// const sentimentType1 = {
//   sentimentName: "angry",
//   sentimentIconUrl:
//     "",

//   isEnable: 1,
// };
// db.sentimentTypes
//   .create(sentimentType1)
//   .then((data) => {})
//   .catch((err) => {
//     res.status(500).send({
//       message: err.message || "sentiment type cant be created",
//     });
//   });

// const sentimentType2 = {
//   sentimentName: "care",
//   sentimentIconUrl:
//     "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",

//   isEnable: 1,
// };
// db.sentimentTypes
//   .create(sentimentType2)
//   .then((data) => {})
//   .catch((err) => {
//     res.status(500).send({
//       message: err.message || "sentiment type cant be created",
//     });
//   });
// const sentimentType3 = {
//   sentimentName: "clap",
//   sentimentIconUrl:
//     "",

//   isEnable: 1,
// };
// db.sentimentTypes
//   .create(sentimentType3)
//   .then((data) => {})
//   .catch((err) => {
//     res.status(500).send({
//       message: err.message || "sentiment type cant be created",
//     });
//   });
// const sentimentType4 = {
//   sentimentName: "excited",
//   sentimentIconUrl:
//     "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",

//   isEnable: 1,
// };
// db.sentimentTypes
//   .create(sentimentType4)
//   .then((data) => {})
//   .catch((err) => {
//     res.status(500).send({
//       message: err.message || "sentiment type cant be created",
//     });
//   });
// const sentimentType5 = {
//   sentimentName: "laugh",
//   sentimentIconUrl:
//     "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",

//   isEnable: 1,
// };
// db.sentimentTypes
//   .create(sentimentType5)
//   .then((data) => {})
//   .catch((err) => {
//     res.status(500).send({
//       message: err.message || "sentiment type cant be created",
//     });
//   });
// const sentimentType6 = {
//   sentimentName: "sad",
//   sentimentIconUrl:
//     "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",

//   isEnable: 1,
// };
// db.sentimentTypes
//   .create(sentimentType6)
//   .then((data) => {})
//   .catch((err) => {
//     res.status(500).send({
//       message: err.message || "sentiment type cant be created",
//     });
//   });

//------------------------------------------------------------------------------

// create notification groups
// const notificationGroup1 = {
//   groupName: "Deeds Notifications",

//   isEnable: 1,
// };
// db.notificationGroups
//   .create(notificationGroup1)
//   .then(async (data) => {
//     const notificationType1 = {
//       notification_group_id: data.id,
//       notificationTypeName: "Like",
//       isEnable: 1,
//     };
//     await db.notificationTypes
//       .create(notificationType1)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "notification type created created",
//         });
//       });
//     const notificationType2 = {
//       notification_group_id: data.id,
//       notificationTypeName: "Sentiment",
//       isEnable: 1,
//     };
//     await db.notificationTypes
//       .create(notificationType2)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "notification type created created",
//         });
//       });
//     const notificationType3 = {
//       notification_group_id: data.id,
//       notificationTypeName: "Comment",
//       isEnable: 1,
//     };
//     await db.notificationTypes
//       .create(notificationType3)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "notification type created created",
//         });
//       });
//     const notificationType4 = {
//       notification_group_id: data.id,
//       notificationTypeName: "Share",
//       isEnable: 1,
//     };
//     await db.notificationTypes
//       .create(notificationType4)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "notification type created created",
//         });
//       });
//   })
//   .catch((err) => {
//     res.status(500).send({
//       message: err.message || "notification group  created",
//     });
//   });

// const notificationGroup2 = {
//   groupName: "Citizen Notifications",

//   isEnable: 1,
// };
// db.notificationGroups
//   .create(notificationGroup2)
//   .then(async (data) => {
//     const notificationType1 = {
//       notification_group_id: data.id,
//       notificationTypeName: "New Follower",
//       isEnable: 1,
//     };
//     await db.notificationTypes
//       .create(notificationType1)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "notification type created created",
//         });
//       });
//     const notificationType2 = {
//       notification_group_id: data.id,
//       notificationTypeName: "New Message",
//       isEnable: 1,
//     };
//     await db.notificationTypes
//       .create(notificationType2)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "notification type created created",
//         });
//       });
//     const notificationType3 = {
//       notification_group_id: data.id,
//       notificationTypeName: "Shares",
//       isEnable: 1,
//     };
//     await db.notificationTypes
//       .create(notificationType3)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "notification type created created",
//         });
//       });
//   })
//   .catch((err) => {
//     res.status(500).send({
//       message: err.message || "notification group  created",
//     });
//   });
// -----------------------------------------------------------------------------
// create Trophies & Badges point type and add hyphen between them
// const pointTypes = {
//   nameType: "Trophies & Badges",
//   isEnable: 1,
// };
// db.pointTypes
//   .create(pointTypes)
//   .then(async (pointTypeData) => {
//     const pointTitle1 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Good Samaritan-bronze",
//       pointStartAt: 10,
//       pointEndAt: 25,
//       isEnable: 1,
//     };
//     const pointTitle2 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Good Samaritan-silver",
//       pointStartAt: 26,
//       pointEndAt: 50,
//       isEnable: 1,
//     };
//     const pointTitle3 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Good Samaritan-gold",
//       pointStartAt: 51,
//       pointEndAt: 100000000,
//       isEnable: 1,
//     };
//     const pointTitle4 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Spokesperson-bronze",
//       pointStartAt: 10,
//       pointEndAt: 25,
//       isEnable: 1,
//     };
//     const pointTitle5 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Spokesperson-silver",
//       pointStartAt: 26,
//       pointEndAt: 50,
//       isEnable: 1,
//     };
//     const pointTitle6 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Spokesperson-gold",
//       pointStartAt: 51,
//       pointEndAt: 100000000,
//       isEnable: 1,
//     };
//     const pointTitle7 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Supporter-bronze",
//       pointStartAt: 100,
//       pointEndAt: 250,
//       isEnable: 1,
//     };
//     const pointTitle8 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Supporter-silver",
//       pointStartAt: 251,
//       pointEndAt: 500,
//       isEnable: 1,
//     };

//     const pointTitle9 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Supporter-gold",
//       pointStartAt: 501,
//       pointEndAt: 100000000,
//       isEnable: 1,
//     };
//     const pointTitle10 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Activist-bronze",
//       pointStartAt: 100,
//       pointEndAt: 250,
//       isEnable: 1,
//     };
//     const pointTitle11 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Activist-silver",
//       pointStartAt: 251,
//       pointEndAt: 500,
//       isEnable: 1,
//     };
//     const pointTitle12 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Activist-gold",
//       pointStartAt: 501,
//       pointEndAt: 100000000,
//       isEnable: 1,
//     };

//     const pointTitle13 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Environmentalist-bronze",
//       pointStartAt: 10,
//       pointEndAt: 250,
//       isEnable: 1,
//     };
//     const pointTitle14 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Environmentalist-silver",
//       pointStartAt: 251,
//       pointEndAt: 500,
//       isEnable: 1,
//     };
//     const pointTitle15 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Environmentalist-gold",
//       pointStartAt: 501,
//       pointEndAt: 100000000,
//       isEnable: 1,
//     };

//     await db.pointTitles
//       .create(pointTitle1)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle2)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle3)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle4)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle5)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle6)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle7)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle8)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle9)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle10)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle11)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle12)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle13)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle14)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle15)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//   })
//   .catch((err) => {
//     res.status(500).send({
//       message: err.message || "created",
//     });
//   });

// -----------------------------------------------------------------------------
// -----------------------------------------------------------------------------
// create Achievements & Experience
// const pointTypes = {
//   nameType: "Achievements & Experience",
//   isEnable: 1,
// };
// db.pointTypes
//   .create(pointTypes)
//   .then(async (pointTypeData) => {
//     const pointTitle1 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Citizen",
//       pointStartAt: 100,
//       pointEndAt: 399,
//       isEnable: 1,
//     };
//     const pointTitle2 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Council Member",
//       pointStartAt: 400,
//       pointEndAt: 699,
//       isEnable: 1,
//     };
//     const pointTitle3 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "House of Representative",
//       pointStartAt: 700,
//       pointEndAt: 999,
//       isEnable: 1,
//     };
//     const pointTitle4 = {
//       pointTypeId: pointTypeData.id,
//       nameTitle: "Mayor",
//       pointStartAt: 1000,
//       pointEndAt: 100000000,
//       isEnable: 1,
//     };

//     await db.pointTitles
//       .create(pointTitle1)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle2)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle3)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//     await db.pointTitles
//       .create(pointTitle4)
//       .then((data) => {})
//       .catch((err) => {
//         res.status(500).send({
//           message: err.message || "point titles created",
//         });
//       });
//   })
//   .catch((err) => {
//     res.status(500).send({
//       message: err.message || "created",
//     });
//   });

// -----------------------------------------------------------------------------
// adding causes and cause types
// const causeType1 = {
//   causeTypeName: "general",
//   isEnable: 1,
// };

// const causeType2 = {
//   causeTypeName: "main",
//   isEnable: 1,
// };
// db.causeType
//   .create(causeType1)
//   .then(async (data) => {
//     console.log("created");
//     db.causeType
//       .create(causeType2)
//       .then(async (data) => {
//         let auth_type = db.causeType
//           .findOne({
//             where: { causeTypeName: "main" },
//           })
//           .then((data) => {
//             // console.log(data.dataValues.id);

//             const cause1 = {
//               causeTypeId: data.dataValues.id,
//               causeName: "noPoverty",
//               causeDetail: "detail",
//               causeIconUrl: "req.body.causeIconUrl",
//               causeColor: "06758F",
//               isEnable: 1,
//             };
//             db.causes
//               .create(cause1)
//               .then((data) => {
//                 console.log("cause 1 added");
//               })
//               .catch((err) => {
//                 console.log(err);
//               });

//             const cause3 = {
//               causeTypeId: data.dataValues.id,
//               causeName: "zeroHunger",
//               causeDetail: "detail",
//               causeIconUrl: "req.body.causeIconUrl",
//               causeColor: "06758F",
//               isEnable: 1,
//             };
//             db.causes
//               .create(cause3)
//               .then((data) => {
//                 console.log("cause 3 added");
//               })
//               .catch((err) => {
//                 console.log(err);
//               });
//             const cause7 = {
//               causeTypeId: data.dataValues.id,
//               causeName: "goodHealthAndWellBeing",
//               causeDetail: "detail",
//               causeIconUrl: "req.body.causeIconUrl",
//               causeColor: "06758F",
//               isEnable: 1,
//             };
//             db.causes
//               .create(cause7)
//               .then((data) => {
//                 console.log("cause 2 added");
//               })
//               .catch((err) => {
//                 console.log(err);
//               });
//           })
//           .catch((err) => {
//             console.log(err);
//           });

//         let auth_type2 = db.causeType
//           .findOne({
//             where: { causeTypeName: "general" },
//           })
//           .then((data) => {
//             // console.log(data.dataValues.id);

//             const cause2 = {
//               causeTypeId: data.dataValues.id,
//               causeName: "spreadingLove",
//               causeDetail: "detail",
//               causeIconUrl: "req.body.causeIconUrl",
//               causeColor: "06758F",
//               isEnable: 1,
//             };
//             db.causes
//               .create(cause2)
//               .then((data) => {
//                 console.log("cause 2 added");
//               })
//               .catch((err) => {
//                 console.log(err);
//               });
//             const cause4 = {
//               causeTypeId: data.dataValues.id,
//               causeName: "kindnessMyWay",
//               causeDetail: "detail",
//               causeIconUrl: "req.body.causeIconUrl",
//               causeColor: "06758F",
//               isEnable: 1,
//             };
//             db.causes
//               .create(cause4)
//               .then((data) => {
//                 console.log("cause 4 added");
//               })
//               .catch((err) => {
//                 console.log(err);
//               });
//             const cause5 = {
//               causeTypeId: data.dataValues.id,
//               causeName: "loveYourselfy/feelingYourself",
//               causeDetail: "detail",
//               causeIconUrl: "req.body.causeIconUrl",
//               causeColor: "06758F",
//               isEnable: 1,
//             };
//             db.causes
//               .create(cause5)
//               .then((data) => {
//                 console.log("cause 2 added");
//               })
//               .catch((err) => {
//                 console.log(err);
//               });
//             const cause6 = {
//               causeTypeId: data.dataValues.id,
//               causeName: "radiatePositivity",
//               causeDetail: "detail",
//               causeIconUrl: "req.body.causeIconUrl",
//               causeColor: "06758F",
//               isEnable: 1,
//             };
//             db.causes
//               .create(cause6)
//               .then((data) => {
//                 console.log("cause 2 added");
//               })
//               .catch((err) => {
//                 console.log(err);
//               });
//           })
//           .catch((err) => {
//             console.log(err);
//           });

//         console.log("created");
//       })
//       .catch((err) => {
//         console.log(err);
//       });
//   })
//   .catch((err) => {
//     console.log(err);
//   });
// -----------------------------------------------------------------------------
// db.sequelize.sync({ force: true }).then(async () => {
//   // Create AUTH TYPES
//   const auth = {
//     authTypeName: "login",
//     isEnable: 1,
//   };

//   const auth1 = {
//     authTypeName: "verify",
//     isEnable: 1,
//   };

//   const auth2 = {
//     authTypeName: "forgetPass",
//     isEnable: 1,
//   };

// const auth3 = {
//     authTypeName: "facebook",
//     isEnable: 1,
//   };
// const auth4 = {
//     authTypeName: "gmail",
//     isEnable: 1,
//   };

//   authTypes
//     .create(auth)
//     .then((data) => {
//       // console.log(data);
//     })
//     .catch((err) => {
//       // console.log(err);
//     });

//   authTypes
//     .create(auth1)
//     .then((data) => {
//       // console.log(data);
//     })
//     .catch((err) => {
//       // console.log(err);
//     });
//   authTypes
//     .create(auth2)
//     .then((data) => {
//       // console.log(data);
//     })
//     .catch((err) => {
//       // console.log(err);
//     });
// authTypes
//     .create(auth3)
//     .then((data) => {
//       // console.log(data);
//     })
//     .catch((err) => {
//       // console.log(err);
//     });

// authTypes
//     .create(auth4)
//     .then((data) => {
//       // console.log(data);
//     })
//     .catch((err) => {
//       // console.log(err);
//     });

//   console.log("Drop and re-sync db.");
// });

// db.sequelize.sync({ force: false }).then(async () => {
//   console.log("Drop and re-sync db.");
// });

// var corsOptions = {
//   origin: "http://localhost:8081",
// };

// app.use(cors(corsOptions));

// parse requests of content-type - application/json
app.use(express.json());

// parse requests of content-type - application/x-www-form-urlencoded
app.use(express.urlencoded({ extended: true }));

// simple route
app.get("/", (req, res) => {
  res.json({ message: "Welcome to virtue backend" });
});

require("./app/routes/assetTypes.routes")(app);
require("./app/routes/authentication.routes")(app);
require("./app/routes/causes.route")(app);
require("./app/routes/causeType.routes")(app);
require("./app/routes/citizenCause.routes")(app);
require("./app/routes/citizenNotification.routes")(app);
require("./app/routes/citizenNotificationSettings.routes")(app);
require("./app/routes/citizenProfile.route")(app);
require("./app/routes/CitizenProfileAssets.routes")(app);
require("./app/routes/closeCauseAcceptedInvites.routes")(app);
require("./app/routes/CloseCauseInvites.routes")(app);
require("./app/routes/deedAssets.routes")(app);
require("./app/routes/deedcomments.routes")(app);
require("./app/routes/deedlikes.routes")(app);
require("./app/routes/deeds.routes")(app);
require("./app/routes/deedsentiment.routes")(app);
require("./app/routes/deedShares.routes")(app);
require("./app/routes/deedTaggedCitizen.routes")(app);
require("./app/routes/deedtags.routes")(app);
require("./app/routes/earnedPoints.routes")(app);
require("./app/routes/follower.routes")(app);
require("./app/routes/notificationGroup.routes")(app);
require("./app/routes/notificationTypes.routes")(app);
require("./app/routes/openInvites.routes")(app);
require("./app/routes/pointTitles.routes")(app);
require("./app/routes/sentimentTypes.routes")(app);
require("./app/routes/pointTypes.routes")(app);
require("./app/routes/emailverification.routes")(app);
require("./app/routes/allProfileData.routes")(app);
require("./app/routes/deedCategories.routes")(app);
require("./app/routes/citizenActivity.routes")(app);

// set port, listen for requests
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}.`);
});
